Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.2.187 Build 20190117

Compiler options: -qopt-report=5 -xskylake-avx512 -qopt-zmm-usage=high -align array64byte -o vector1_matvec

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: matvec_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matvec_mod._) [1/2=50.0%] vector1_matvec.f90(1,8)


    Report from: Code generation optimizations [cg]

vector1_matvec.f90(1,8):remark #34051: REGISTER ALLOCATION : [matvec_mod._] vector1_matvec.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MATVEC_MOD::MATVEC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MATVEC_MOD::MATVEC) [2/2=100.0%] vector1_matvec.f90(8,12)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vector1_matvec.f90(15,3)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at vector1_matvec.f90(15,3)
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 3.420 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at vector1_matvec.f90(15,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.273
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 3.420 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END
LOOP END

LOOP BEGIN at vector1_matvec.f90(16,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at vector1_matvec.f90(18,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference a(:,j) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.647
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.560 
      remark #15478: estimated potential speedup: 11.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at vector1_matvec.f90(18,9)
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference a(:,j) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.556
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.560 
      remark #15478: estimated potential speedup: 11.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at vector1_matvec.f90(18,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference c(:) has unaligned access
      remark #15389: vectorization support: reference a(:,j) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.647
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.560 
      remark #15478: estimated potential speedup: 11.820 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

vector1_matvec.f90(15,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
vector1_matvec.f90(15,3):remark #34026: call to memset implemented as a call to optimized library version
vector1_matvec.f90(8,12):remark #34051: REGISTER ALLOCATION : [matvec_mod_mp_matvec_] vector1_matvec.f90:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm6 k0-k2]
        
    Routine temporaries
        Total         :      77
            Global    :      36
            Local     :      41
        Regenerable   :       6
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
